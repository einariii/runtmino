%%% @doc
%%% Runtmino State
%%%
%%% This template has been generated by the `zx create project' command and is
%%% dead simple. You can have it save a value and you can read that value back out.
%%% Obviously you will probably want more from a web server than this,
%%% so make it your own.
%%% @end

-module(runtmino_state).
-vsn("0.1.0").
-behavior(gen_server).
-author("einariii").
-copyright("einariii").
-license("MIT").

-export([save/2, read/1]).
-export([start_link/0]).
-export([init/1, handle_call/3, handle_cast/2, handle_info/2,
         code_change/3, terminate/2]).


%%% Type and Record Definitions

-record(s,
        {data = #{} :: #{Key :: term() := Value :: term()}}).

-type state() :: #s{}.



%%% Service Interface

-spec save(Key, Value) -> ok
    when Key   :: term(),
         Value :: term().
%% @doc
%% Save a value.

save(Key, Value) ->
    gen_server:cast(?MODULE, {save, Key, Value}).


-spec read(Key) -> {ok, Value} | error
    when Key   :: term(),
         Value :: term().
%% @doc
%% Read a value.

read(ConfKey) ->
    gen_server:call(?MODULE, {read, ConfKey}).



%%% Startup Functions

-spec start_link() -> Result
    when Result :: {ok, pid()}
                 | {error, Reason :: term()}.
%% @private
%% This should only ever be called by hw_sup (the service-level supervisor).

start_link() ->
    gen_server:start_link({local, ?MODULE}, ?MODULE, none, []).


-spec init(none) -> {ok, state()}.
%% @private
%% Called by the supervisor process to give the process a chance to perform any
%% preparatory work necessary for proper function.

init(none) ->
    State = #s{},
    {ok, State}.



%%% gen_server Message Handling Callbacks

handle_call({read, ConfKey}, _, State) ->
    Value = do_read(ConfKey, State),
    {reply, Value, State};
handle_call(Unexpected, From, State) ->
    ok = io:format("~p Unexpected call from ~tp: ~tp~n", [self(), From, Unexpected]),
    {noreply, State}.

handle_cast({save, ConfKey, Value}, State) ->
    NewState = do_save(ConfKey, Value, State),
    {noreply, NewState};
handle_cast(Unexpected, State) ->
    ok = io:format("~p Unexpected cast: ~tp~n", [self(), Unexpected]),
    {noreply, State}.

handle_info(Unexpected, State) ->
    ok = io:format("~p Unexpected info: ~tp~n", [self(), Unexpected]),
    {noreply, State}.



%%% OTP Service Functions

code_change(_, State, _) ->
    {ok, State}.


terminate(_, _) ->
    ok.



%%% Doer Functions

do_save(Key, Value, State = #s{data = Data}) ->
    NewData = maps:put(Key, Value, Data),
    State#s{data = NewData}.


do_read(Key, #s{data = Data}) ->
    maps:find(Key, Data).
